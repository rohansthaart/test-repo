
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  contact: 'contact',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourScalarFieldEnum = {
  id: 'id',
  title: 'title',
  location: 'location',
  description: 'description',
  price: 'price',
  rating: 'rating',
  noOfUsersRated: 'noOfUsersRated',
  difficulty: 'difficulty',
  distanceInKm: 'distanceInKm',
  durationInHrs: 'durationInHrs',
  altitude: 'altitude',
  season: 'season',
  minGroupSize: 'minGroupSize',
  maxGroupSize: 'maxGroupSize',
  startingLat: 'startingLat',
  startingLng: 'startingLng',
  endingLat: 'endingLat',
  endingLng: 'endingLng',
  route: 'route',
  highlights: 'highlights',
  itinerary: 'itinerary',
  feeIncluded: 'feeIncluded',
  feeNotIncluded: 'feeNotIncluded',
  hikingEssentials: 'hikingEssentials',
  cancellationPolicy: 'cancellationPolicy',
  meetingPoint: 'meetingPoint',
  meetingPointUrl: 'meetingPointUrl',
  meetingTime: 'meetingTime',
  contactDetails: 'contactDetails',
  scheduledDate: 'scheduledDate',
  thumbnailUrl: 'thumbnailUrl',
  tags: 'tags',
  isActive: 'isActive',
  tourType: 'tourType',
  guideId: 'guideId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTourScalarFieldEnum = {
  userId: 'userId',
  tourId: 'tourId',
  joinedAt: 'joinedAt'
};

exports.Prisma.TourDateScalarFieldEnum = {
  id: 'id',
  date: 'date',
  deadline: 'deadline',
  tourId: 'tourId'
};

exports.Prisma.GalleryScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  tourId: 'tourId'
};

exports.Prisma.TourRouteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  latLngs: 'latLngs',
  elevationProfile: 'elevationProfile',
  tourId: 'tourId'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  userId: 'userId',
  tourId: 'tourId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  contact: 'contact'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.TourOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  location: 'location',
  description: 'description',
  altitude: 'altitude',
  season: 'season',
  route: 'route',
  cancellationPolicy: 'cancellationPolicy',
  meetingPoint: 'meetingPoint',
  meetingPointUrl: 'meetingPointUrl',
  meetingTime: 'meetingTime',
  thumbnailUrl: 'thumbnailUrl',
  guideId: 'guideId'
};

exports.Prisma.UserTourOrderByRelevanceFieldEnum = {
  userId: 'userId',
  tourId: 'tourId'
};

exports.Prisma.TourDateOrderByRelevanceFieldEnum = {
  id: 'id',
  tourId: 'tourId'
};

exports.Prisma.GalleryOrderByRelevanceFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  tourId: 'tourId'
};

exports.Prisma.TourRouteOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  tourId: 'tourId'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  id: 'id',
  comment: 'comment',
  userId: 'userId',
  tourId: 'tourId'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  GUIDE: 'GUIDE',
  ADMIN: 'ADMIN'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  EASY: 'EASY',
  MODERATE: 'MODERATE',
  HARD: 'HARD',
  EXTREME: 'EXTREME'
};

exports.TourType = exports.$Enums.TourType = {
  HIKING: 'HIKING',
  TREKKING: 'TREKKING',
  CAMPING: 'CAMPING',
  EXPEDITION: 'EXPEDITION',
  GUIDED: 'GUIDED',
  SOLO: 'SOLO'
};

exports.Prisma.ModelName = {
  User: 'User',
  Tour: 'Tour',
  UserTour: 'UserTour',
  TourDate: 'TourDate',
  Gallery: 'Gallery',
  TourRoute: 'TourRoute',
  Review: 'Review'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
